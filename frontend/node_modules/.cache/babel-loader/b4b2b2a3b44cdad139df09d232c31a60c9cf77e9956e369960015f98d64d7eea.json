{"ast":null,"code":"var _jsxFileName = \"/Users/architayadav/RAC_DRDO/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/AuthContext.js\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { initialUsers } from '../data/mockData'; // Import the starting user list\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  // --- STATE MANAGEMENT UPGRADED ---\n  const [currentUser, setCurrentUser] = useState(null); // The user who is logged in\n  const [allUsers, setAllUsers] = useState(initialUsers); // The entire list of users\n  const [isLoading, setIsLoading] = useState(true);\n  const navigate = useNavigate();\n\n  // This effect handles persisting the LOGGED-IN user on page reload\n  useEffect(() => {\n    try {\n      const storedUser = localStorage.getItem('drdo-user');\n      if (storedUser) {\n        setCurrentUser(JSON.parse(storedUser));\n      }\n    } catch (error) {\n      console.error(\"Failed to parse user from localStorage\", error);\n      localStorage.removeItem('drdo-user');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // --- LOGIN FUNCTION UPDATED ---\n  // It now checks against the dynamic 'allUsers' state, not the initial static list.\n  const login = (email, password) => {\n    const foundUser = allUsers.find(user => user.email === email);\n    if (foundUser) {\n      // In a real app, also check password: && user.password === password\n      setCurrentUser(foundUser);\n      localStorage.setItem('drdo-user', JSON.stringify(foundUser));\n      // Navigate to the correct dashboard\n      switch (foundUser.role) {\n        case 'Admin':\n          navigate('/admin-dashboard');\n          break;\n        case 'Screening Member':\n          navigate('/dashboard');\n          break;\n        case 'Applicant':\n          navigate('/applicant-dashboard');\n          break;\n        default:\n          navigate('/login');\n      }\n      return true;\n    }\n    return false;\n  };\n\n  // --- NEW SIGNUP FUNCTION ---\n  const signup = newUserData => {\n    // Check if user already exists\n    const userExists = allUsers.some(user => user.email === newUserData.email);\n    if (userExists) {\n      alert('An account with this email already exists.');\n      return false;\n    }\n\n    // Create the new user object with a default role\n    const newUser = {\n      id: allUsers.length + 1,\n      // Simple ID generation\n      name: `${newUserData.firstName} ${newUserData.lastName}`,\n      email: newUserData.email,\n      password: newUserData.password,\n      role: 'Applicant' // Default role for all new signups\n    };\n\n    // Add the new user to our \"database\" (the allUsers state)\n    setAllUsers(prevUsers => [...prevUsers, newUser]);\n    console.log(\"New user added:\", newUser);\n    console.log(\"Updated user list:\", [...allUsers, newUser]);\n    return true;\n  };\n  const logout = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('drdo-user');\n    navigate('/login');\n  };\n\n  // The value provided to all consuming components\n  const value = {\n    isAuthenticated: !!currentUser,\n    user: currentUser,\n    isLoading,\n    login,\n    logout,\n    signup,\n    // Expose the new signup function\n    allUsers,\n    // Expose the user list for the admin dashboard\n    setAllUsers // Expose the setter for the admin dashboard\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"rCjZU+IHrFmizBMkpUbgUq5zlRU=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useNavigate","initialUsers","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","allUsers","setAllUsers","isLoading","setIsLoading","navigate","storedUser","localStorage","getItem","JSON","parse","error","console","removeItem","login","email","password","foundUser","find","user","setItem","stringify","role","signup","newUserData","userExists","some","alert","newUser","id","length","name","firstName","lastName","prevUsers","log","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/architayadav/RAC_DRDO/frontend/src/context/AuthContext.js"],"sourcesContent":["// src/context/AuthContext.js\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { initialUsers } from '../data/mockData'; // Import the starting user list\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n    // --- STATE MANAGEMENT UPGRADED ---\n    const [currentUser, setCurrentUser] = useState(null); // The user who is logged in\n    const [allUsers, setAllUsers] = useState(initialUsers); // The entire list of users\n    const [isLoading, setIsLoading] = useState(true);\n    const navigate = useNavigate();\n\n    // This effect handles persisting the LOGGED-IN user on page reload\n    useEffect(() => {\n        try {\n            const storedUser = localStorage.getItem('drdo-user');\n            if (storedUser) {\n                setCurrentUser(JSON.parse(storedUser));\n            }\n        } catch (error) {\n            console.error(\"Failed to parse user from localStorage\", error);\n            localStorage.removeItem('drdo-user');\n        } finally {\n            setIsLoading(false);\n        }\n    }, []);\n\n    // --- LOGIN FUNCTION UPDATED ---\n    // It now checks against the dynamic 'allUsers' state, not the initial static list.\n    const login = (email, password) => {\n        const foundUser = allUsers.find(user => user.email === email);\n        if (foundUser) { // In a real app, also check password: && user.password === password\n            setCurrentUser(foundUser);\n            localStorage.setItem('drdo-user', JSON.stringify(foundUser));\n            // Navigate to the correct dashboard\n            switch (foundUser.role) {\n                case 'Admin': navigate('/admin-dashboard'); break;\n                case 'Screening Member': navigate('/dashboard'); break;\n                case 'Applicant': navigate('/applicant-dashboard'); break;\n                default: navigate('/login');\n            }\n            return true;\n        }\n        return false;\n    };\n\n    // --- NEW SIGNUP FUNCTION ---\n    const signup = (newUserData) => {\n        // Check if user already exists\n        const userExists = allUsers.some(user => user.email === newUserData.email);\n        if (userExists) {\n            alert('An account with this email already exists.');\n            return false;\n        }\n\n        // Create the new user object with a default role\n        const newUser = {\n            id: allUsers.length + 1, // Simple ID generation\n            name: `${newUserData.firstName} ${newUserData.lastName}`,\n            email: newUserData.email,\n            password: newUserData.password,\n            role: 'Applicant', // Default role for all new signups\n        };\n\n        // Add the new user to our \"database\" (the allUsers state)\n        setAllUsers(prevUsers => [...prevUsers, newUser]);\n        console.log(\"New user added:\", newUser);\n        console.log(\"Updated user list:\", [...allUsers, newUser]);\n        return true;\n    };\n\n    const logout = () => {\n        setCurrentUser(null);\n        localStorage.removeItem('drdo-user');\n        navigate('/login');\n    };\n\n    // The value provided to all consuming components\n    const value = {\n        isAuthenticated: !!currentUser,\n        user: currentUser,\n        isLoading,\n        login,\n        logout,\n        signup, // Expose the new signup function\n        allUsers, // Expose the user list for the admin dashboard\n        setAllUsers, // Expose the setter for the admin dashboard\n    };\n\n    return (\n        <AuthContext.Provider value={value}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nexport const useAuth = () => {\n    return useContext(AuthContext);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}